{
  "status": true,
  "model": {
    "solved": true,
    "attempted": true,
    "can_be_viewed": true,
    "can_edit": null,
    "dynamic": true,
    "has_started": true,
    "has_ended": false,
    "countdown_time": 0,
    "requirements_description": null,
    "max_score": 10,
    "active": true,
    "epoch_starttime": null,
    "epoch_endtime": null,
    "time_left": null,
    "factor": 10,
    "expert_solution_status": false,
    "custom_tabs": null,
    "total_count": 569741,
    "solved_count": 530895,
    "success_ratio": 0.9318181419276478,
    "is_editorial_available": true,
    "is_solution_unlocked": true,
    "contest_slug": "master",
    "topics": [],
    "user_score": 10.0,
    "id": 26276,
    "slug": "mini-max-sum",
    "name": "Mini-Max Sum",
    "status": null,
    "created_at": "2016-10-06T10:54:23.000Z",
    "updated_at": "2018-08-12T16:00:23.000Z",
    "kind": "code",
    "preview": "Find the maximum and minimum values obtained by summing four of five integers.",
    "codechecker_handle": null,
    "category": "ai",
    "deleted": false,
    "company_id": null,
    "difficulty_score": "0.0",
    "migrated_resource": null,
    "level": 50,
    "is_custom": false,
    "player_count": 2,
    "custom_checker_language": null,
    "checker_program": null,
    "judgebot_language": null,
    "judgebot": null,
    "onboarding": null,
    "compile_and_test": true,
    "languages": [
      "c",
      "clojure",
      "cpp",
      "cpp14",
      "csharp",
      "erlang",
      "go",
      "haskell",
      "java",
      "java8",
      "javascript",
      "kotlin",
      "lua",
      "objectivec",
      "perl",
      "php",
      "pypy",
      "python",
      "pypy3",
      "python3",
      "ruby",
      "scala",
      "swift"
    ],
    "is_text": false,
    "custom": false,
    "track": {
      "id": 43,
      "name": "Warmup",
      "slug": "warmup",
      "track_id": 3,
      "track_name": "Algorithms",
      "track_slug": "algorithms",
      "domain_score": 1935.19
    },
    "custom_case": true,
    "submit_disabled": false,
    "public_test_cases": true,
    "public_solutions": true,
    "can_solve": true,
    "company": null,
    "difficulty": 0.9,
    "color": null,
    "primary_contest": {
      "id": 10067,
      "name": "University CodeSprint",
      "slug": "university-codesprint",
      "created_at": "2016-10-07T19:32:35.000Z",
      "updated_at": "2016-11-16T01:02:19.000Z",
      "starttime": "2016-11-10T17:00:00.000Z",
      "endtime": "2016-11-13T17:00:00.000Z",
      "timezone": "PST",
      "homepage": null,
      "tagline": null,
      "description": "Join students worldwide to participate in the largest student coding competition. Represent your school and compete against other students to see which school has the best programmers. Youâ€™ll have 72 hours to solve 8 algorithm challenges and 1 bonus single player game challenge.",
      "homepage_background_color": null,
      "notification": null,
      "template_id": 548,
      "expose_stats": null,
      "public": true,
      "team_event": false,
      "rating_category": "Algorithms",
      "is_rating_updated": true,
      "leaderboard_backend": null,
      "leaderboard_format": "",
      "primary_track_id": 3,
      "college_public": true,
      "rated": true,
      "is_multi_round": false,
      "parent_contest_id": null,
      "primary_tag_id": 3081,
      "started": true,
      "ended": true,
      "epoch_endtime": 1479056400,
      "epoch_starttime": 1478797200,
      "time_left": -103136017.29641637,
      "hide_difficulty": null,
      "has_tracks": null,
      "archived": true,
      "leaderboard_type": "school",
      "kind": "",
      "leaderboard_freeze_time": null,
      "show_penalty": true,
      "track": {
        "id": 3,
        "name": "Algorithms",
        "slug": "algorithms",
        "priority": 14,
        "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n",
        "rewards_system_enabled": true
      },
      "hide_navigation": null,
      "contest_broadcast": null,
      "hide_leaderboard": null,
      "hide_submissions": null,
      "leaderboard_out_of_sync": null,
      "leaderboard_out_of_sync_message": null,
      "challenges_count": 8,
      "show_participants_info": null,
      "custom_leaderboard_column_name": null,
      "disable_forum": null,
      "disable_fsi": null,
      "has_codesprint_reg_page": null,
      "hidden": null,
      "comment_live_sync": null,
      "company_associated_contest": null,
      "limited_participants": false,
      "leaderboard_broadcast_message": null,
      "qualification_rule_type": null,
      "qualification_rule_value": 0,
      "qualification_rule_msg": null,
      "migration_status": null,
      "migration_disabled": null,
      "testers_contest": null,
      "time_limited_contest": false,
      "hacker_timelimit": null,
      "school_leaderboard_enabled": true,
      "organization_type": null,
      "organization_name": null,
      "effective_time_left": -103136017.29833104,
      "effective_epoch_endtime": 1479056400
    },
    "solved_score": 0.5,
    "available_translations": [],
    "leaderboard_out_of_sync": null,
    "leaderboard_out_of_sync_message": null,
    "require_unlock": true,
    "show_skeliton": null,
    "difficulty_name": "Easy",
    "default_language": null,
    "c_template": "// Complete the miniMaxSum function below.\nvoid miniMaxSum(int arr_count, int* arr) {\n\n\n}\n\n",
    "c_template_head": "#include \u003cassert.h\u003e\n#include \u003climits.h\u003e\n#include \u003cmath.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstddef.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\nchar* readline();\nchar** split_string(char*);\n\n",
    "c_template_tail": "int main()\n{\n    char** arr_temp = split_string(readline());\n\n    int* arr = malloc(5 * sizeof(int));\n\n    for (int i = 0; i \u003c 5; i++) {\n        char* arr_item_endptr;\n        char* arr_item_str = *(arr_temp + i);\n        int arr_item = strtol(arr_item_str, \u0026arr_item_endptr, 10);\n\n        if (arr_item_endptr == arr_item_str || *arr_item_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n        *(arr + i) = arr_item;\n    }\n\n    int arr_count = 5;\n\n    miniMaxSum(arr_count, arr);\n\n    return 0;\n}\n\nchar* readline() {\n    size_t alloc_length = 1024;\n    size_t data_length = 0;\n    char* data = malloc(alloc_length);\n\n    while (true) {\n        char* cursor = data + data_length;\n        char* line = fgets(cursor, alloc_length - data_length, stdin);\n\n        if (!line) { break; }\n\n        data_length += strlen(cursor);\n\n        if (data_length \u003c alloc_length - 1 || data[data_length - 1] == '\\n') { break; }\n\n        size_t new_length = alloc_length \u003c\u003c 1;\n        data = realloc(data, new_length);\n\n        if (!data) { break; }\n\n        alloc_length = new_length;\n    }\n\n    if (data[data_length - 1] == '\\n') {\n        data[data_length - 1] = '\\0';\n    }\n\n    data = realloc(data, data_length);\n\n    return data;\n}\n\nchar** split_string(char* str) {\n    char** splits = NULL;\n    char* token = strtok(str, \" \");\n\n    int spaces = 0;\n\n    while (token) {\n        splits = realloc(splits, sizeof(char*) * ++spaces);\n        if (!splits) {\n            return splits;\n        }\n\n        splits[spaces - 1] = token;\n\n        token = strtok(NULL, \" \");\n    }\n\n    return splits;\n}\n",
    "cpp_template": "// Complete the miniMaxSum function below.\nvoid miniMaxSum(vector\u003cint\u003e arr) {\n\n\n}\n\n",
    "cpp_template_head": "#include \u003cbits/stdc++.h\u003e\n\nusing namespace std;\n\nvector\u003cstring\u003e split_string(string);\n\n",
    "cpp_template_tail": "int main()\n{\n    string arr_temp_temp;\n    getline(cin, arr_temp_temp);\n\n    vector\u003cstring\u003e arr_temp = split_string(arr_temp_temp);\n\n    vector\u003cint\u003e arr(5);\n\n    for (int i = 0; i \u003c 5; i++) {\n        int arr_item = stoi(arr_temp[i]);\n\n        arr[i] = arr_item;\n    }\n\n    miniMaxSum(arr);\n\n    return 0;\n}\n\nvector\u003cstring\u003e split_string(string input_string) {\n    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char \u0026x, const char \u0026y) {\n        return x == y and x == ' ';\n    });\n\n    input_string.erase(new_end, input_string.end());\n\n    while (input_string[input_string.length() - 1] == ' ') {\n        input_string.pop_back();\n    }\n\n    vector\u003cstring\u003e splits;\n    char delimiter = ' ';\n\n    size_t i = 0;\n    size_t pos = input_string.find(delimiter);\n\n    while (pos != string::npos) {\n        splits.push_back(input_string.substr(i, pos - i));\n\n        i = pos + 1;\n        pos = input_string.find(delimiter, i);\n    }\n\n    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));\n\n    return splits;\n}\n",
    "java_template": "    // Complete the miniMaxSum function below.\n    static void miniMaxSum(int[] arr) {\n\n\n    }\n\n",
    "java_template_head": "import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n",
    "java_template_tail": "    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int[] arr = new int[5];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c 5; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        miniMaxSum(arr);\n\n        scanner.close();\n    }\n}\n",
    "csharp_template": "    // Complete the miniMaxSum function below.\n    static void miniMaxSum(int[] arr) {\n\n\n    }\n\n",
    "csharp_template_head": "using System.CodeDom.Compiler;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Text.RegularExpressions;\nusing System.Text;\nusing System;\n\nclass Solution {\n\n",
    "csharp_template_tail": "    static void Main(string[] args) {\n        int[] arr = Array.ConvertAll(Console.ReadLine().Split(' '), arrTemp =\u003e Convert.ToInt32(arrTemp))\n        ;\n        miniMaxSum(arr);\n    }\n}\n",
    "php_template": "// Complete the miniMaxSum function below.\nfunction miniMaxSum($arr) {\n\n\n}\n\n",
    "php_template_head": "\u003c?php\n\n",
    "php_template_tail": "$stdin = fopen(\"php://stdin\", \"r\");\n\nfscanf($stdin, \"%[^\\n]\", $arr_temp);\n\n$arr = array_map('intval', preg_split('/ /', $arr_temp, -1, PREG_SPLIT_NO_EMPTY));\n\nminiMaxSum($arr);\n\nfclose($stdin);\n",
    "ruby_template": "# Complete the miniMaxSum function below.\ndef miniMaxSum(arr)\n\n\nend\n\n",
    "ruby_template_head": "#!/bin/ruby\n\nrequire 'json'\nrequire 'stringio'\n\n",
    "ruby_template_tail": "arr = gets.rstrip.split(' ').map(\u0026:to_i)\n\nminiMaxSum arr\n",
    "python_template": "# Complete the miniMaxSum function below.\ndef miniMaxSum(arr):\n\n",
    "python_template_head": "#!/bin/python\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n",
    "python_template_tail": "if __name__ == '__main__':\n    arr = map(int, raw_input().rstrip().split())\n\n    miniMaxSum(arr)\n",
    "perl_template": "# Complete the miniMaxSum function below.\nsub miniMaxSum {\n\n\n}\n\n",
    "perl_template_head": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\n",
    "perl_template_tail": "my $arr = \u003c\u003e;\n$arr =~ s/\\s+$//;\nmy @arr = split /\\s+/, $arr;\n\nminiMaxSum \\@arr;\n",
    "haskell_template": "-- Complete the miniMaxSum function below.\nminiMaxSum arr = do\n\n",
    "haskell_template_head": "{-# LANGUAGE FlexibleInstances, UndecidableInstances, DuplicateRecordFields #-}\n\nmodule Main where\n\nimport Control.Monad\nimport Data.Array\nimport Data.Bits\nimport Data.List\nimport Data.List.Split\nimport Data.Set\nimport Debug.Trace\nimport System.Environment\nimport System.IO\nimport System.IO.Unsafe\n\n",
    "haskell_template_tail": "readMultipleLinesAsStringArray :: Int -\u003e IO [String]\nreadMultipleLinesAsStringArray 0 = return []\nreadMultipleLinesAsStringArray n = do\n    line \u003c- getLine\n    rest \u003c- readMultipleLinesAsStringArray(n - 1)\n    return (line : rest)\n\nmain :: IO()\nmain = do\n    arrTemp \u003c- getLine\n\n    let arr = Data.List.map (read :: String -\u003e Int) . words $ arrTemp\n\n    miniMaxSum arr\n",
    "clojure_template": "; Complete the miniMaxSum function below.\n(defn miniMaxSum [arr]\n\n\n)\n\n",
    "clojure_template_head": "",
    "clojure_template_tail": "(def arr (vec (map #(Integer/parseInt %) (clojure.string/split (read-line) #\" \"))))\n\n(miniMaxSum arr)\n",
    "scala_template": "    // Complete the miniMaxSum function below.\n    def miniMaxSum(arr: Array[Int]) {\n\n\n    }\n\n",
    "scala_template_head": "import java.io._\nimport java.math._\nimport java.security._\nimport java.text._\nimport java.util._\nimport java.util.concurrent._\nimport java.util.function._\nimport java.util.regex._\nimport java.util.stream._\n\nobject Solution {\n\n",
    "scala_template_tail": "    def main(args: Array[String]) {\n        val stdin = scala.io.StdIn\n\n        val arr = stdin.readLine.split(\" \").map(_.trim.toInt)\n        miniMaxSum(arr)\n    }\n}\n",
    "lua_template": "-- Complete the miniMaxSum function below.\nfunction miniMaxSum(arr)\n\n\nend\n\n",
    "lua_template_head": "",
    "lua_template_tail": "local arr = {}\n\nfor token in string.gmatch(io.stdin:read(\"*l\"), \"[^%s]+\") do\n    table.insert(arr, tonumber(token))\nend\n\nminiMaxSum(arr)\n",
    "erlang_template": "% Complete the miniMaxSum function below.\nminiMaxSum(Arr) -\u003e\n\n",
    "erlang_template_head": "-module(solution).\n-export([main/0]).\n\n",
    "erlang_template_tail": "read_multiple_lines_as_list_of_strings(N) -\u003e\n    read_multiple_lines_as_list_of_strings(N, []).\n\nread_multiple_lines_as_list_of_strings(0, Acc) -\u003e\n    lists:reverse(Acc);\nread_multiple_lines_as_list_of_strings(N, Acc) when N \u003e 0 -\u003e\n    read_multiple_lines_as_list_of_strings(N - 1, [string:chomp(io:get_line(\"\")) | Acc]).\n\nmain() -\u003e\n    ArrTemp = re:split(string:chomp(io:get_line(\"\")), \"\\\\s+\", [{return, list}, trim]),\n\n    Arr = lists:map(fun(X) -\u003e {I, _} = string:to_integer(X), I end, ArrTemp),\n\n    miniMaxSum(Arr),\n\n    ok.\n",
    "javascript_template": "// Complete the miniMaxSum function below.\nfunction miniMaxSum(arr) {\n\n\n}\n\n",
    "javascript_template_head": "'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n",
    "javascript_template_tail": "function main() {\n    const arr = readLine().split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    miniMaxSum(arr);\n}\n",
    "go_template": "// Complete the miniMaxSum function below.\nfunc miniMaxSum(arr []int32) {\n\n\n}\n\n",
    "go_template_head": "package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n)\n\n",
    "go_template_tail": "func main() {\n    reader := bufio.NewReaderSize(os.Stdin, 1024 * 1024)\n\n    arrTemp := strings.Split(readLine(reader), \" \")\n\n    var arr []int32\n\n    for i := 0; i \u003c 5; i++ {\n        arrItemTemp, err := strconv.ParseInt(arrTemp[i], 10, 64)\n        checkError(err)\n        arrItem := int32(arrItemTemp)\n        arr = append(arr, arrItem)\n    }\n\n    miniMaxSum(arr)\n}\n\nfunc readLine(reader *bufio.Reader) string {\n    str, _, err := reader.ReadLine()\n    if err == io.EOF {\n        return \"\"\n    }\n\n    return strings.TrimRight(string(str), \"\\r\\n\")\n}\n\nfunc checkError(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\n",
    "python3_template": "# Complete the miniMaxSum function below.\ndef miniMaxSum(arr):\n\n",
    "python3_template_head": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n",
    "python3_template_tail": "if __name__ == '__main__':\n    arr = list(map(int, input().rstrip().split()))\n\n    miniMaxSum(arr)\n",
    "objectivec_template": "@interface Solution:NSObject\n- (void) miniMaxSum:(NSArray *)arr;\n@end\n\n@implementation Solution\n// Complete the miniMaxSum function below.\n- (void) miniMaxSum:(NSArray *)arr {\n\n\n}\n\n@end\n\n",
    "objectivec_template_head": "#import \u003cFoundation/Foundation.h\u003e\n#import \u003cobjc/Object.h\u003e\n#import \u003cobjc/objc.h\u003e\n\n@interface NSString (NumberFromString)\n- (NSNumber *) numberFromString:(NSNumberFormatter *)formatter;\n@end\n\n@implementation NSString (NumberFromString)\n- (NSNumber *) numberFromString:(NSNumberFormatter *)formatter {\n    NSNumber *number = [formatter numberFromString:self];\n\n    if (number == nil) {\n        [NSException raise:@\"Bad Input\" format:@\"%@\", self];\n    }\n\n    return number;\n}\n@end\n\n@interface NSString (ArrayFromString)\n- (NSArray *) arrayFromString;\n@end\n\n@implementation NSString (ArrayFromString)\n- (NSArray *) arrayFromString {\n    return [self componentsSeparatedByString:@\" \"];\n}\n@end\n\n",
    "objectivec_template_tail": "int main(int argc, const char* argv[]) {\n    @autoreleasepool {\n        NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];\n\n        NSData *availableInputData = [[NSFileHandle fileHandleWithStandardInput] availableData];\n        NSString *availableInputString = [[NSString alloc] initWithData:availableInputData encoding:NSUTF8StringEncoding];\n        NSArray *availableInputArray = [availableInputString componentsSeparatedByString:@\"\\n\"];\n\n        NSUInteger currentInputLine = 0;\n\n        NSArray *arrTemp = [[availableInputArray objectAtIndex:currentInputLine] componentsSeparatedByString:@\" \"];\n        currentInputLine += 1;\n\n        NSMutableArray *arrTempMutable = [NSMutableArray arrayWithCapacity:5];\n\n        [arrTemp enumerateObjectsUsingBlock:^(NSString *arrItem, NSUInteger idx, BOOL *stop) {\n            [arrTempMutable addObject:[arrItem numberFromString:numberFormatter]];\n        }];\n\n        NSArray *arr = [arrTempMutable copy];\n\n        [[[Solution alloc] init] miniMaxSum:arr];\n    }\n\n    return 0;\n}\n",
    "java8_template": "    // Complete the miniMaxSum function below.\n    static void miniMaxSum(int[] arr) {\n\n\n    }\n\n",
    "java8_template_head": "import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n",
    "java8_template_tail": "    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int[] arr = new int[5];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c 5; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        miniMaxSum(arr);\n\n        scanner.close();\n    }\n}\n",
    "swift_template": "// Complete the miniMaxSum function below.\nfunc miniMaxSum(arr: [Int]) -\u003e Void {\n\n\n}\n\n",
    "swift_template_head": "import Foundation\n\n",
    "swift_template_tail": "guard let arrTemp = readLine() else { fatalError(\"Bad input\") }\nlet arr: [Int] = arrTemp.split(separator: \" \").map {\n    if let arrItem = Int($0.trimmingCharacters(in: .whitespacesAndNewlines)) {\n        return arrItem\n    } else { fatalError(\"Bad input\") }\n}\n\nguard arr.count == 5 else { fatalError(\"Bad input\") }\n\nminiMaxSum(arr: arr)\n",
    "cpp14_template": "// Complete the miniMaxSum function below.\nvoid miniMaxSum(vector\u003cint\u003e arr) {\n\n\n}\n\n",
    "cpp14_template_head": "#include \u003cbits/stdc++.h\u003e\n\nusing namespace std;\n\nvector\u003cstring\u003e split_string(string);\n\n",
    "cpp14_template_tail": "int main()\n{\n    string arr_temp_temp;\n    getline(cin, arr_temp_temp);\n\n    vector\u003cstring\u003e arr_temp = split_string(arr_temp_temp);\n\n    vector\u003cint\u003e arr(5);\n\n    for (int i = 0; i \u003c 5; i++) {\n        int arr_item = stoi(arr_temp[i]);\n\n        arr[i] = arr_item;\n    }\n\n    miniMaxSum(arr);\n\n    return 0;\n}\n\nvector\u003cstring\u003e split_string(string input_string) {\n    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char \u0026x, const char \u0026y) {\n        return x == y and x == ' ';\n    });\n\n    input_string.erase(new_end, input_string.end());\n\n    while (input_string[input_string.length() - 1] == ' ') {\n        input_string.pop_back();\n    }\n\n    vector\u003cstring\u003e splits;\n    char delimiter = ' ';\n\n    size_t i = 0;\n    size_t pos = input_string.find(delimiter);\n\n    while (pos != string::npos) {\n        splits.push_back(input_string.substr(i, pos - i));\n\n        i = pos + 1;\n        pos = input_string.find(delimiter, i);\n    }\n\n    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));\n\n    return splits;\n}\n",
    "pypy_template": "#\n# Complete the miniMaxSum function below.\n#\ndef miniMaxSum(arr):\n    #\n    # Write your code here.\n    #\n\n",
    "pypy_template_head": "#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n",
    "pypy_template_tail": "if __name__ == '__main__':\n    arr = map(int, raw_input().rstrip().split())\n\n    miniMaxSum(arr)\n",
    "pypy3_template": "#\n# Complete the miniMaxSum function below.\n#\ndef miniMaxSum(arr):\n    #\n    # Write your code here.\n    #\n\n",
    "pypy3_template_head": "#!/bin/python3\n\nimport os\nimport sys\n\n",
    "pypy3_template_tail": "if __name__ == '__main__':\n    arr = list(map(int, input().rstrip().split()))\n\n    miniMaxSum(arr)\n",
    "kotlin_template": "// Complete the miniMaxSum function below.\nfun miniMaxSum(arr: Array\u003cInt\u003e): Unit {\n\n\n}\n\n",
    "kotlin_template_head": "import java.io.*\nimport java.math.*\nimport java.security.*\nimport java.text.*\nimport java.util.*\nimport java.util.concurrent.*\nimport java.util.function.*\nimport java.util.regex.*\nimport java.util.stream.*\nimport kotlin.collections.*\nimport kotlin.comparisons.*\nimport kotlin.io.*\nimport kotlin.jvm.*\nimport kotlin.jvm.functions.*\nimport kotlin.jvm.internal.*\nimport kotlin.ranges.*\nimport kotlin.sequences.*\nimport kotlin.text.*\n\n",
    "kotlin_template_tail": "fun main(args: Array\u003cString\u003e) {\n    val scan = Scanner(System.`in`)\n\n    val arr = scan.nextLine().split(\" \").map{ it.trim().toInt() }.toTypedArray()\n\n    miniMaxSum(arr)\n}\n",
    "hacker": {
      "id": 15055,
      "username": "HackerRank",
      "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png",
      "is_admin": false
    },
    "body_html": "\u003cdiv class='challenge_problem_statement'\u003e\u003cdiv class='msB challenge_problem_statement_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eGiven five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. Then print the respective minimum and maximum values as a single line of two space-separated long integers.  \u003c/p\u003e\n\n\u003cp\u003eFor example, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"17.667ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 7606.7 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(981,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1710,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2766,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3045,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3545,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3990,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4491,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4936,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5436,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5882,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6382,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(6827,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7328,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.  Our minimum sum is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"18.594ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 8005.9 1008.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(722,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1723,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4169,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5170,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5948,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7004,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e and our maximum sum is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"18.594ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 8005.9 1008.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(722,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1723,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4169,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5170,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5948,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7004,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.  We would print  \u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e16 24\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eFunction Description\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cp\u003eComplete the \u003cem\u003eminiMaxSum\u003c/em\u003e function in the editor below.  It should print two space-separated integers on one line: the minimum sum and the maximum sum of \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e of \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e elements.  \u003c/p\u003e\n\n\u003cp\u003eminiMaxSum has the following parameter(s):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003earr\u003c/em\u003e: an array of \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e integers  \u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_input_format'\u003e\u003cdiv class='msB challenge_input_format_title'\u003e\u003cp\u003e\u003cstrong\u003eInput Format\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_input_format_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eA single line of five space-separated integers.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_constraints'\u003e\u003cdiv class='msB challenge_constraints_title'\u003e\u003cp\u003e\u003cstrong\u003eConstraints\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_constraints_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003e\u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16.162ex\" height=\"3.176ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -1006.6 6958.5 1367.4\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(778,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1834,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2364,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2815,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3267,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3545,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3891,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4447,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5503,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003cg transform=\"translate(1001,393)\"\u003e\u003cpath stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e  \u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_output_format'\u003e\u003cdiv class='msB challenge_output_format_title'\u003e\u003cp\u003e\u003cstrong\u003eOutput Format\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_output_format_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003ePrint two space-separated long integers denoting the respective minimum and maximum values that can be calculated by summing exactly \u003cem\u003efour\u003c/em\u003e of the five integers. (The output can be greater than a 32 bit integer.)\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_sample_input'\u003e\u003cdiv class='msB challenge_sample_input_title'\u003e\u003cp\u003e\u003cstrong\u003eSample Input\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_sample_input_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cpre\u003e\u003ccode\u003e1 2 3 4 5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_sample_output'\u003e\u003cdiv class='msB challenge_sample_output_title'\u003e\u003cp\u003e\u003cstrong\u003eSample Output\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_sample_output_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cpre\u003e\u003ccode\u003e10 14\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class='challenge_explanation'\u003e\u003cdiv class='msB challenge_explanation_title'\u003e\u003cp\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv class='msB challenge_explanation_body'\u003e\u003cdiv class='hackdown-content'\u003e\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eOur initial numbers are \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e. We can calculate the following sums using four of the five integers:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIf we sum everything except \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, our sum is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-7-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"18.594ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 8005.9 1008.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(722,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1723,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4169,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5170,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5948,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7004,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.\u003c/li\u003e\n\u003cli\u003eIf we sum everything except \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-8-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, our sum is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-9-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"18.594ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 8005.9 1008.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(722,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1723,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4169,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5170,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5948,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7004,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.\u003c/li\u003e\n\u003cli\u003eIf we sum everything except \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-10-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, our sum is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-11-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"18.594ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 8005.9 1008.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(722,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1723,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4169,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5170,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5948,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7004,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.\u003c/li\u003e\n\u003cli\u003eIf we sum everything except \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-12-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, our sum is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-13-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"18.594ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 8005.9 1008.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(722,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1723,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4169,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5170,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5948,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7004,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.\u003c/li\u003e\n\u003cli\u003eIf we sum everything except \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-14-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e, our sum is \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-15-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"18.594ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 8005.9 1008.6\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(722,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1723,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3446,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4169,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5170,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(5948,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(7004,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eHints:\u003c/strong\u003e Beware of integer overflow! Use 64-bit Integer.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eNeed help to get started? Try the \u003ca href=\"https://www.hackerrank.com/challenges/solve-me-first\"\u003eSolve Me First\u003c/a\u003e problem\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
    "author_name": "bishop15",
    "author_avatar": "https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg",
    "version_ids": [],
    "bookmarked": false,
    "is_preview_contest": false,
    "visual_output_flag": false,
    "real_dynamic": false,
    "submitted_hackers_count": 569741,
    "has_all_test_cases_public": false,
    "moderator_or_support": null
  }
}